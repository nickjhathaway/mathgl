
@c ------------------------------------------------------------------
@node Plotter classes, Widget classes, MathGL core, Top
@chapter Plotter classes
@cindex mglGraphAB
@cindex mglGraphZB
@cindex mglGraphPS
@cindex mglGraphGL
@cindex mglGraphIDTF

The class mglGraph (@pxref{MathGL core}) provide the basic tools for creating scientific graphics but it is abstract class. The matter is that there are several possible way to draw a graphics: in bitmap, in vector file, using OpenGL and so on. As result, user should use some of derived classes to do actual drawing. In principle, it is possible to derive a class exactly from mglGraph (and it was in v.1.6). But I recommend to derive from mglGraphAB class for higher compatibility of produced graphics from different classes. Class mglGraphAB is another abstract class which provide basic coordinates transformation, plotting functions and export to bitmap picture. It still require a functions for drawing lines, triangles and quadrangles. So below a set of ``plotter'' classes with short comments.

@deftp {Class} mglGraphAB
Abstract class mglGraphAB implements plotting function for 1D, 2D and 3D plots using Z-ordering and provides base functionality for to screen coordinate transformation, bitmap creation and so on. Class is defined in @code{#include <mgl/mgl_ab.h>}.
@end deftp

@deftp {Class} mglGraphZB
Class mglGraphZB implements plotting function for 1D, 2D and 3D plots using Z-Buffer. It is useful for off-screen (for console or SSH terminal) programs. Also this class can be used in any other programs which may draw bitmap on the  screen (for example, by using FLTK, Qt, wxWidgets libraries and so on). Note that bitmap picture is saved while exporting to EPS format. The produced graphics have better quality but slower in comparison with graphics in the class mglGraphPS. Class is defined in @code{#include <mgl/mgl_zb.h>}.
@end deftp

@deftp {Class} mglGraphPS
Class mglGraphPS implements plotting functions for 1D, 2D and 3D plots and exports them to PostScript or SVG file. It is useful for off-screen (for console or SSH terminal) programs. Note that there is no transparency support now and color interpolation and lightning support is limited (not so nice as in class mglGraphZB). As result the plots with transparency (SurfA, Surf3A, CloudP, CloudQ) may look not so good. However the speed of drawing is higher in comparison with one in the class mglGraphZB. Class is defined in @code{#include <mgl/mgl_eps.h>}.
@end deftp

@deftp {Class} mglGraphGL
Class mglGraphGL implements plotting function for 1D, 2D and 3D plots under OpenGL. This class can not be used in off-screen applications. Note, that several transparent overlapped surfaces are drawn not so correctly due to OpenGL limitations. Class is defined in @code{#include <mgl/mgl_gl.h>}.
@end deftp

@deftp {Class} mglGraphIDTF
Class mglGraphIDTF implements plotting function for 1D, 2D and 3D plots  and export it in IDTF format. Later this file can be converted in U3D format. Class is defined in @code{#include <mgl/mgl_idtf.h>}.
@end deftp

@menu
* mglGraphAB class::            
@end menu

@c ------------------------------------------------------------------
@node mglGraphAB class, , , Plotter classes
@section mglGraphAB class
@cindex mglGraphAB
@cindex window

Generally this class is a bit less abstract class than mglGraph class (@pxref{MathGL core}). It provide many protected methods for handling intermediate data from mglGraph methods and require a few methods to be defined by derived class. The developers of derived classes should look on file @samp{mgl_ab.h} and comments inside it or contact me.

Here I just show new public methods for class mglGraphAB. There are functions returning the created picture (bitmap), its width and height. You may display it by yourself in any graphical library (see also, @ref{Widget classes}) or save in file (see also, @ref{Export to file}).

@deftypemethod mglGraphAB @code{const unsigned char *} GetBits ()
Gets RGB bitmap of the current state of the image. Format of each element of bits is: @{red, green, blue@}. Number of elements is Width*Height. Position of element @{i,j@} is [3*i + 3*Width*j].
@end deftypemethod

@deftypemethod mglGraphAB @code{const unsigned char *} GetRGBA ()
Gets RGBA bitmap of the current state of the image. Format of each element of bits is: @{red, green, blue, alpha@}. Number of elements is Width*Height. Position of element @{i,j@} is [4*i + 4*Width*j].
@end deftypemethod

@deftypemethod mglGraphAB @code{int} GetWidth ()
Gets width of the image.
@end deftypemethod

@deftypemethod mglGraphAB @code{int} GetHeight ()
Gets height of the image.
@end deftypemethod

Class mglGraphAB is the base class for ``widget classes''. So there are set of functions for handling window behavior. Most of them are applicable only for ``window'' classes (like mglGraphFLTK and so on, @pxref{Widget classes}). In all other classes these functions just do nothing. You should provide the corresponding interface in derived ``widget'' classes for user convenience.

@deftypemethod mglGraphAB @code{void} Window (@code{int} argc, @code{char **}argv, @code{int (*}draw)(@code{mglGraph *}gr, @code{void *}p), @code{const char *}title, @code{void *}par=@code{NULL}, @code{void (*}reload)(@code{int} next, @code{void *}p)=@code{NULL})
This function creates a window for plotting. Parameters @var{argc}, @var{argv} contain OS specific information and should be the same as in function @code{main(int argc,char **argv)}. Parameter @var{draw} sets a pointer (this is the name of function) to drawing function. There is support of a list of plots (frames). So as one can prepare a set of frames at first and redraw it fast later (but it requires more memory). Function should return positive number of frames for the list or zero if it will plot directly. Parameter @var{title} sets the title of the window. Parameter @var{par} contains pointer to data for the plotting function @var{draw}.

There are some keys handles for manipulating by the plot: 'a', 'd', 'w', 's' for the rotating; ',', '.' for viewing of the previous or next frames in the list; 'r' for the switching of transparency; 'f' for the switching of lightning; 'x' for hiding (closing) the window.

@strong{IMPORTANT!!!} You need to add a call of Rotate() (@pxref{Transformation matrix}) function for having possibility of plot rotation. If plot should be unrotated by default just add @code{Rotate(0,0)} in drawing function.
@end deftypemethod

@deftypemethod mglGraphAB @code{void} Window (@code{int} argc, @code{char **}argv, @code{mglDraw *}draw, @code{const char *}title)
This function is mostly the same as previous one. The only difference is that the drawing function and function for data reloading are specified as methods on a class inherited from class @code{mglDraw}. This class is defined in @code{#include <mgl/mgl_data.h>} and have only 2 methods:
@verbatim
class mglDraw
{
public:
    virtual int Draw(mglGraph *) { return 0; };
    virtual void Reload(int) {};
};
@end verbatim
You should inherit yours class from @code{mglDraw} and reimplement one or both functions for using this function.
@end deftypemethod


@deftypemethod mglGraphAB @code{void} ToggleAlpha ()
Switch on/off transparency but do not overwrite switches in user drawing function.
@end deftypemethod
@deftypemethod mglGraphAB @code{void} ToggleLight ()
Switch on/off lighting but do not overwrite switches in user drawing function.
@end deftypemethod
@deftypemethod mglGraphAB @code{void} ToggleZoom ()
Switch on/off zooming by mouse as region selection.
@end deftypemethod
@deftypemethod mglGraphAB @code{void} ToggleRotate ()
Switch on/off rotation by mouse. Usually, left button is used for rotation, middle button for shift, right button for zoom/perspective.
@end deftypemethod
@deftypemethod mglGraphAB @code{void} ToggleNo ()
Switch off all zooming and rotation and restore initial state.
@end deftypemethod
@deftypemethod mglGraphAB @code{void} Update ()
Update window contents.
@end deftypemethod
@deftypemethod mglGraphAB @code{void} ReLoad (@code{bool} o)
Reload user data and update picture.
@end deftypemethod
@deftypemethod mglGraphAB @code{void} Adjust ()
Adjust size of bitmap to window size.
@end deftypemethod
@deftypemethod mglGraphAB @code{void} NextFrame ()
Show next frame if one.
@end deftypemethod
@deftypemethod mglGraphAB @code{void} PrevFrame ()
Show previous frame if one.
@end deftypemethod
@deftypemethod mglGraphAB @code{void} Animation ()
Run/stop slideshow (animation) of frames
@end deftypemethod

@deftypecv {Widget option} mglGraphAB @code{bool} AutoClf
Clear canvas between drawing. You may switch it off for accumulate previous drawing (for example some points or parts of a picture).
@end deftypecv
@deftypecv {Widget option} mglGraphAB @code{float} Delay
Delay for animation in seconds. Default value is 1 sec.
@end deftypecv

@deftypemethod mglGraphAB @code{mglPoint} CalcXYZ (@code{int} xs, @code{int} ys)
Calculate 3D coordinate @{x,y,z@} for screen point @{xs,ys@}. At this moment it ignore perspective and transformation formulas (curvilinear coordinates). The calculation are done for the last used InPlot (@pxref{Transformation matrix}).
@end deftypemethod
@deftypecv {Widget option} mglGraphAB @code{float} ShowMousePos
Switch to show or not in the widget the last mouse click position.
@end deftypecv

@c ------------------------------------------------------------------
@node Widget classes, mglData class, Plotter classes, Top
@chapter Widget classes
@cindex mglGraphFLTK
@cindex mglGraphQT
@cindex mglGraphGLUT
@cindex Fl_MathGL
@cindex QMathGL
@cindex window
@cindex widgets

There are set of ``window'' classes for making a window with MathGL graphics: @code{mglGraphFLTK}, @code{mglGraphQT}, @code{mglGraphGLUT}. All these classes allow user to show, rotate, export, and change view of the plot using keyboard. Most of them (except @code{mglGraphGLUT}) also have toolbar and menu for simplifying plot manipulation. Usually these classes (except @code{mglGraphGLUT}) are derived from @code{mglGraphZB} class and have a ``connected'' class for widget in corresponding window library. All window classes have the same set of functions (@pxref{mglGraphAB class}). Below the full list of classes with short comments.

@deftp {Class} mglGraphFLTK
Class @code{mglGraphFLTK} adds the possibility to create plotting window with the help of FLTK library. It allows one to show, rotate, export, and change view of the plot by keyboard, menu and toolbar. ``Corresponding'' widget class is @code{Fl_MathGL}. Class is defined in @code{#include <mgl/mgl_fltk.h>}.
@end deftp

@deftp {Class} Fl_MathGL
Class is FLTK widget for displaying the MathGL output. Class is defined in @code{#include <mgl/mgl_fltk.h>}.
@end deftp

@deftp {Class} mglGraphQT
Class @code{mglGraphQT} adds the possibility to create plotting window with the help of QT library. It allows one to show, rotate, export, and change view of the plot by keyboard, menu and toolbar. ``Corresponding'' widget class is @code{QMathGL}. Class is defined in @code{#include <mgl/mgl_qt.h>}.
@end deftp

@deftp {Class} QMathGL
Class is Qt widget for dysplaing the MathGL output. Class is defined in @code{#include <mgl/mgl_qt.h>}.
@end deftp

@deftp {Class} mglGraphGLUT
Class @code{mglGraphGLUT} adds the possibility to create plotting window with the help of GLUT library. It allows one to show, rotate, export, and change view of the plot only by keyboard. Class is defined in @code{#include <mgl/mgl_glut.h>}.
@end deftp

@menu
* Fl_MathGL class::             
* QMathGL class::               
@end menu

@c ------------------------------------------------------------------
@node Fl_MathGL class, QMathGL class, , Widget classes
@section Fl_MathGL class
@cindex Fl_MathGL
@cindex widgets

Class is FLTK widget which display MathGL graphics (defined in @code{#include <mgl/mgl_fltk.h>}

@deftypemethod Fl_MathGL @code{void} update (@code{mglGraph *}gr=@code{NULL})
Update (redraw) plot using grapher @var{gr} (built-in by default).
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} set_angle (@code{float} t, @code{float} p)
Set angles for additional plot rotation
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} set_state (@code{int} f)
Set bitwise flags for general state (1-Alpha, 2-Light)
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} set_state (@code{bool} z, @code{bool} r)
Set flags for handling mouse: @var{z}=@code{true} allow zooming, @var{r}=@code{true} allow rotation/shifting/perspective and so on.
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} set_zoom (@code{float} X1, @code{float} Y1, @code{float} X2, @code{float} Y2)
Set zoom in/out region
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} get_zoom (@code{float *}X1, @code{float *}Y1, @code{float *}X2, @code{float *}Y2)
Get zoom in/out region
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} set_popup (@code{const Fl_Menu_Item *}pmenu, @code{Fl_Widget *}w, @code{void *}v)
Set popup menu pointer
@end deftypemethod
@deftypemethod Fl_MathGL @code{mglGraph *} get_graph ()
Get pointer to grapher
@end deftypemethod

@deftypecv {Widget option} Fl_MathGL @code{Fl_Valuator *} tet_val
Pointer to external tet-angle validator.
@end deftypecv
@deftypecv {Widget option} Fl_MathGL @code{Fl_Valuator *} phi_val
Pointer to external phi-angle validator.
@end deftypecv
@deftypecv {Widget option} Fl_MathGL @code{mglGraphAB *} graph
Pointer to grapher
@end deftypecv
@deftypecv {Widget option} Fl_MathGL @code{void *} draw_par
Parameters for drawing function mglGraph::DrawFunc.
@end deftypecv
@deftypecv {Widget option} Fl_MathGL @code{int (*} draw_func @code{)(mglGraph *gr, void *par)}
Drawing function for window procedure. It should return the number of frames.
@end deftypecv

@c ------------------------------------------------------------------
@node QMathGL class, , Fl_MathGL class, Widget classes
@section QMathGL class
@cindex QMathGL
@cindex widgets

Class is Qt widget which display MathGL graphics (defined in @code{#include <mgl/mgl_qt.h>}

@deftypemethod QMathGL @code{double} getRatio ()
Return aspect ratio of the picture.
@end deftypemethod
@deftypemethod QMathGL @code{void} setGraph (@code{mglGraphAB *}gr)
Set pointer to external grapher (instead of built-in @code{mglGraphZB}). Note that QMathGL will automatically delete this object at destruction or at new @code{setGraph()} call.
@end deftypemethod
@deftypemethod QMathGL @code{void} setPopup (@code{QMenu *}p)
Set popup menu pointer.
@end deftypemethod
@deftypemethod QMathGL @code{void} setSize (@code{int} w, @code{int} h)
Set widget/picture sizes
@end deftypemethod
@deftypemethod QMathGL @code{int} getPer ()
Get perspective value in percents.
@end deftypemethod
@deftypemethod QMathGL @code{int} getPhi ()
Get Phi-angle value in degrees.
@end deftypemethod
@deftypemethod QMathGL @code{int} getTet ()
Get Theta-angle value in degrees.
@end deftypemethod
@deftypemethod QMathGL @code{bool} getAlpha ()
Get transparency state.
@end deftypemethod
@deftypemethod QMathGL @code{bool} getLight ()
Get lightning state.
@end deftypemethod
@deftypemethod QMathGL @code{bool} getZoom ()
Get mouse zooming state.
@end deftypemethod
@deftypemethod QMathGL @code{bool} getRotate ()
Get mouse rotation state.
@end deftypemethod

@defop Slot QMathGL @code{void} refresh ()
Redraw saved bitmap without executing drawing function.
@end defop
@defop Slot QMathGL @code{void} update (@code{mglGraph *}gr=@code{NULL})
Update picture by executing drawing function.
@end defop
@defop Slot QMathGL @code{void} copy ()
Copy graphics to clipboard.
@end defop
@defop Slot QMathGL @code{void} setPer (@code{int} val)
Set perspective value.
@end defop
@defop Slot QMathGL @code{void} setPhi (@code{int} val)
Set Phi-angle value.
@end defop
@defop Slot QMathGL @code{void} setTet (@code{int} val)
Set Theta-angle value.
@end defop
@defop Slot QMathGL @code{void} setAlpha (@code{bool} val)
Switch on/off transparency.
@end defop
@defop Slot QMathGL @code{void} setLight (@code{bool} val)
Switch on/off lightning.
@end defop
@defop Slot QMathGL @code{void} setZoom (@code{bool} val)
Switch on/off mouse zooming.
@end defop
@defop Slot QMathGL @code{void} setRotate (@code{bool} val)
Switch on/off mouse rotation.
@end defop
@defop Slot QMathGL @code{void} zoomIn ()
Zoom in graphics.
@end defop
@defop Slot QMathGL @code{void} zoomOut ()
Zoom out graphics.
@end defop
@defop Slot QMathGL @code{void} restore ()
Restore zoom and rotation to default values.
@end defop
@defop Slot QMathGL @code{void} reload ()
Reload data and execute script.
@end defop
@defop Slot QMathGL @code{void} shiftLeft ()
Shift graphics to left direction.
@end defop
@defop Slot QMathGL @code{void} shiftRight ()
Shift graphics to right direction.
@end defop
@defop Slot QMathGL @code{void}shiftUp  ()
Shift graphics to up direction.
@end defop
@defop Slot QMathGL @code{void} shiftDown ()
Shift graphics to down direction.
@end defop
@defop Slot QMathGL @code{void} exportPNG (@code{QString} fname=@code{""})
Export current picture to PNG file.
@end defop
@defop Slot QMathGL @code{void} exportPNGs (@code{QString} fname=@code{""})
Export current picture to PNG file (no transparency).
@end defop
@defop Slot QMathGL @code{void} exportJPG (@code{QString} fname=@code{""})
Export current picture to JPEG file.
@end defop
@defop Slot QMathGL @code{void} exportTIF (@code{QString} fname=@code{""})
Export current picture to TIFF file.
@end defop
@defop Slot QMathGL @code{void} exportBPS (@code{QString} fname=@code{""})
Export current picture to bitmap EPS file.
@end defop
@defop Slot QMathGL @code{void} exportEPS (@code{QString} fname=@code{""})
Export current picture to vector EPS file.
@end defop
@defop Slot QMathGL @code{void} exportSVG (@code{QString} fname=@code{""})
Export current picture to SVG file.
@end defop
@defop Slot QMathGL @code{void} exportIDTF (@code{QString} fname=@code{""})
Export current picture to IDTF file.
@end defop
@defop Slot QMathGL @code{void} setMGLFont (@code{QString} path)
Restore (@var{path}=@code{""} or load font for graphics.
@end defop
@defop Slot QMathGL @code{void} print ()
Print current picture
@end defop
@defop Slot QMathGL @code{void} adjust ()
Adjust plot size to fill entire window. This function is executed only if graph is mglGraphQT instance.
@end defop
@defop Slot QMathGL @code{void} nextSlide ()
Show next slide. This function is executed only if graph is mglGraphQT instance.
@end defop
@defop Slot QMathGL @code{void} prevSlide ()
Show previous slide. This function is executed only if graph is mglGraphQT instance.
@end defop
@defop Slot QMathGL @code{void} animation (@code{bool} st=@code{true})
Start animation. This function is executed only if graph is mglGraphQT instance.
@end defop
@defop Slot QMathGL @code{void} about ()
Show about information.
@end defop
@defop Slot QMathGL @code{void} aboutQt ()
Show information about Qt version.
@end defop

@defop Signal QMathGL @code{void} phiChanged (@code{int} val)
Phi angle changed (by mouse or by toolbar).
@end defop
@defop Signal QMathGL @code{void} tetChanged (@code{int} val)
Tet angle changed (by mouse or by toolbar).
@end defop
@defop Signal QMathGL @code{void} perChanged (@code{int} val)
Perspective changed (by mouse or by toolbar).
@end defop
@defop Signal QMathGL @code{void} alphaChanged (@code{bool} val)
Transparency changed (by toolbar).
@end defop
@defop Signal QMathGL @code{void} lightChanged (@code{bool} val)
Lighting changed (by toolbar).
@end defop
@defop Signal QMathGL @code{void} zoomChanged (@code{bool} val)
Zooming changed (by toolbar).
@end defop
@defop Signal QMathGL @code{void} rotateChanged (@code{bool} val)
Rotation changed (by toolbar).
@end defop

@deftypecv {Widget option} QMathGL @code{QString} appName
Application name for message boxes.
@end deftypecv
@deftypecv {Widget option} QMathGL @code{bool} autoResize
Allow auto resizing (default is false).
@end deftypecv
@deftypecv {Widget option} QMathGL @code{int} animDelay
Animation delay in ms.
@end deftypecv
@deftypecv {Widget option} QMathGL @code{QString} mousePos
Last mouse position
@end deftypecv
@deftypecv {Widget option} QMathGL @code{void *} draw_par
Parameters for drawing function mglGraph::DrawFunc
@end deftypecv
@deftypecv {Widget option} Fl_MathGL @code{int (*} draw_func @code{)(mglGraph *gr, void *par)}
Drawing function for window procedure. It should return the number of frames (for animation) or @code{0} if none.
@end deftypecv



@c ------------------------------------------------------------------
@c @node mglData class, Other classes, Widget classes, Top
@c @chapter mglData class

@include data.texi



@c ------------------------------------------------------------------
@node Other classes, Interfaces, mglData class, Top
@chapter Other classes

@menu
* mglParse class::              
* mglFormula class::            
* mglFont class::               
* mglColor class::              
* mglPoint class::              
* mglVar class::                
* mglCommand class::            
* mglArg class::                
@end menu

@c ------------------------------------------------------------------
@node mglParse class, mglFormula class, , Other classes
@section mglParse class
@cindex mglParse

Class for parsing and executing MGL script. This class is defined in @code{#include <mgl/mgl_parse.h>}.

Class mglParse is the interpreter for MGL scripts (@pxref{MGL interface}). The main function of mglParse class is @code{Parse()}. Exactly this function parses and executes the script string-by-string. Also there are two subservient functions for the finding and creation of a variable. These functions can be useful for displaying values of variables (arrays) in some external program (in window, for example). The variable @var{DataList} contains full list of variables in script. Flag @var{AllowSetSize} allows one to prevent changing the size of the  picture inside the script (forbids the MGL command @code{setsize}). 

Note an important feature -- if user defines function @var{func} in variable then it will be called before the destroying of this variable (@pxref{mglVar class}).

@deftypemethod mglParse @code{} mglParse (@code{bool} setsize=@code{false})
Constructor initializes all values with zero and set @var{AllowSetSize} value.
@end deftypemethod
@deftypemethod mglParse @code{int} Parse (@code{mglGraph *}gr, @code{const char *}str, @code{long} pos=@code{0})
@deftypemethodx mglParse @code{int} Parse (@code{mglGraph *}gr, @code{const wchar_t *}str, @code{long} pos=@code{0})
Main function in the class. It parses the string @var{str} and executes it by  using @var{gr} as a graphics plotter. Returns the value depending on an error presence in the string @var{str}: 0 -- no error, 1 -- wrong command argument(s), 2 -- unknown command, 3 -- string is too long. Optional argument @var{pos} allows to save the string position in the document (or file) for using @code{for|next} command.
@end deftypemethod

@deftypemethod mglParse @code{int} Export (@code{wchar_t} cpp_out@code{[1024]}, @code{mglGraph *}gr, @code{const wchar_t *}str)
Function parses the string @var{str}, executes it by  using @var{gr} as a graphics plotter and exports it to C++ code. Returns the value depending on an error presence in the string @var{str}: 0 -- no error, 1 -- wrong command argument(s), 2 -- unknown command, 3 -- string is too long. Output C++ text will be placed in @var{out} variable. If string @var{str} have options (defined after ';' symbol) then the corresponding C++ texts are placed in variables @var{op1}, @var{op2}.
@end deftypemethod

@deftypemethod mglParse @code{void} Execute (@code{mglGraph *}gr, @code{FILE *}fp, @code{bool} print=@code{false})
Function parse and execute line-by-line MGL script in file @var{fp}. If @var{print}=@code{true} then all warnings and information will be printed in stdout. Also this function support the @code{for|next} MGL commands.
@end deftypemethod
@deftypemethod mglParse @code{void} Execute (@code{mglGraph *}gr, @code{int} num, @code{const wchar_t **}text, @code{void (*} error @code{)(int line, int kind)=NULL})
Function parse and execute line-by-line MGL script in array @var{text}. If @var{error} is not @code{NULL} then this function will be called for all warnings, information and other messages. Also this function support the @code{for|next} MGL commands.
@end deftypemethod

@deftypemethod mglParse @code{void} Execute (@code{mglGraph *}gr, @code{const char *}text, @code{void (*} error @code{)(int line, int kind)=NULL})
@deftypemethodx mglParse @code{void} Execute (@code{mglGraph *}gr, @code{const wchar_t *}text, @code{void (*} error @code{)(int line, int kind)=NULL})
Function parse and execute line-by-line MGL script in string @var{text}. Lines are separated by @samp{\n} symbol as usual. If @var{error} is not @code{NULL} then this function will be called for all warnings, information and other messages. Also this function support the @code{for|next} MGL commands.
@end deftypemethod

@deftypemethod mglParse @code{bool} AddParam (@code{int} n, @code{const char *}str, @code{bool} isstr=@code{true})
@deftypemethodx mglParse @code{bool} AddParam (@code{int} n, @code{const wchar_t *}str, @code{bool} isstr=@code{true})
Function set the value of @var{n}-th parameter as string @var{str} (@var{n}=0, 1 ... 9). It return @code{true} for success.
@end deftypemethod

@deftypemethod mglParse @code{mglVar *} FindVar (@code{const char *}name)
@deftypemethodx mglParse @code{mglVar *} FindVar (@code{const wchar_t *}name)
Function returns the pointer to variable with name @var{name} or zero if variable is absent. Use this function to put external data array to the script or get the data from the script.
@end deftypemethod
@deftypemethod mglParse @code{mglVar *} AddVar (@code{const char *}name)
@deftypemethodx mglParse @code{mglVar *} AddVar (@code{const wchar_t *}name)
Function returns the pointer to variable with name @var{name}. If variable is absent then new variable is created with name @var{name}. Use this function to put external data array to the script or get the data from the script.
@end deftypemethod

@deftypemethod mglParse @code{void} DeleteVar (@code{mglVar *}v)
@deftypemethodx mglParse @code{void} DeleteVar (@code{const char *}name)
@deftypemethodx mglParse @code{void} DeleteVar (@code{const wchar_t *}name)
Function delete the variable specified by its name or by its pointer.
@end deftypemethod

@deftypemethod mglParse @code{inline void} RestoreOnce ()
Restore Once flag.
@end deftypemethod

@deftypemethod mglParse @code{void} AddCommand (@code{mglCommand *}cmd, @code{int} num=@code{0})
Add @var{num} commands @var{cmd} to the defined MGL commands list. Parameter @var{cmd} is array of @code{mglCommand} structures. If parameter @var{num}=0 then it will be determined automatically. At this, array @var{cmd} @strong{must have} last element with @code{name=L""}
@end deftypemethod

@deftypecv {Option} mglParse @code{mglVar *} DataList
List of variables defined in script.
@end deftypecv
@deftypecv {Option} mglParse @code{bool} AllowSetSize
Flag which allows/forbids the command @code{setsize} in scripts.
@end deftypecv
@deftypecv {Option} mglParse @code{bool} Stop
Flag which interrupt script execution.
@end deftypecv
@deftypecv {Option} mglParse @code{mglCommand *} Cmd
Table (array) of recognizable MGL commands (can be changed by user). Items in the table @strong{MUST be sorted} by @var{name} field !!! Last items must have empty name (i.e. @code{L""}).
@end deftypecv
@deftypecv {Option} mglParse @code{wchar_t *} op1
These strings contain command options and should be placed before the command. These variables are used for MGL->C++ (or other language) conversion.
@end deftypecv
@deftypecv {Option} mglParse @code{wchar_t *} op2
These strings contain command options and should be placed after the command. These variables are used for MGL->C++ (or other language) conversion.
@end deftypecv

@c ------------------------------------------------------------------
@node mglFormula class, mglFont class, mglParse class, Other classes
@section mglFormula class
@cindex mglFormula

Class for evaluating of formula specified by the string. This class is defined in @code{#include <mgl/mgl_eval.h>}.

It is the fast variant of formula evaluation. At creation it will be recognized and compiled to tree-like internal code. At evaluation stage only fast calculations are performed. There is no difference between lower or upper case in formulas. If argument value lie outside the range of function definition then function returns NaN.

There are a lot of functions and operators available. The operators are: @samp{+} -- addition, @samp{-} -- subtraction, @samp{*} -- multiplication, @samp{/} -- division, @samp{^} -- integer power. Also there are logical ``operators'': @samp{<} -- true if x<y, @samp{>} -- true if x>y, @samp{=} -- true if x=y, @samp{&} -- true if x and y both nonzero, @samp{|} -- true if x or y nonzero. These logical operators have lowest priority and return 1 if true or 0 if false.

The basic functions are: @samp{sqrt(x)} -- square root of @var{x}, @samp{pow(x,y)} power @var{x} in @var{y}, @samp{ln(x)} -- natural logarithm of @var{x}, @samp{lg(x)} -- decimal logarithm of @var{x}, @samp{log(a,x)} -- logarithm base @var{a} of @var{x}, @samp{abs(x)} -- absolute value of @var{x}, @samp{sign(x)} -- sign of @var{x}, @samp{mod(x,y)} -- x modulo y, @samp{step(x)} -- step function, @samp{rnd} -- random number, @samp{pi} -- number @math{\pi=3.1415926...}.

Trigonometric functions are: @samp{sin(x)}, @samp{cos(x)}, @samp{tan(x)} (or @samp{tg(x)}). Inverse trigonometric functions are: @samp{asin(x)}, @samp{acos(x)}, @samp{atan(x)}. Hyperbolic functions are: @samp{sinh(x)} (or @samp{sh(x)}), @samp{cosh(x)} (or @samp{ch(x)}), @samp{tanh(x)} (or @samp{th(x)}). Inverse hyperbolic functions are: @samp{asinh(x)}, @samp{acosh(x)}, @samp{atanh(x)}.

There are a set of special functions: @samp{gamma(x)} -- Gamma function @math{\Gamma(x) = \int_0^\infty dt t^@{x-1@} \exp(-t)} , @samp{psi(x)} -- digamma function @math{\psi(x) = \Gamma'(x)/\Gamma(x)} for x!=0, @samp{ai(x)} -- Airy function Ai(x), @samp{bi(x)} -- Airy function Bi(x), @samp{cl(x)} -- Clausen function, @samp{li2(x)} (or @samp{dilog(x)}) -- dilogarithm @math{Li_2(x) = - \Re \int_0^x ds \log(1-s)/s}, @samp{sinc(x)} -- compute @math{sinc(x) = \sin(\pi x) / (\pi x)} for any value of x, @samp{zeta(x)} -- Riemann zeta function @math{\zeta(s) = \sum_@{k=1@}^\infty k^@{-s@}} for arbitrary s!=1, @samp{eta(x)} -- eta function @math{\eta(s) = (1-2^@{1-s@}) \zeta(s)} for arbitrary s, @samp{lp(l,x)} -- Legendre polynomial @math{P_l(x)}, (|x|<=1, l>=0), @samp{w0(x)} -- principal branch of the Lambert @var{W} function, @samp{w1(x)} -- principal branch of the Lambert @var{W} function. Function W(x) is defined to be solution of the equation @math{W \exp(W) = x}.

The exponent integrals are: @samp{ci(x)} -- Cosine integral @math{Ci(x) = \int_0^x dt \cos(t)/t}, @samp{si(x)} -- Sine integral @math{Si(x) = \int_0^x dt \sin(t)/t}, @samp{erf(x)} -- error function @math{erf(x) = (2/\sqrt(\pi)) \int_0^x dt \exp(-t^2)}, @samp{ei(x)} -- exponential integral @math{Ei(x) := - PV(\int_@{-x@}^\infty dt \exp(-t)/t)} (where PV denotes the principal value of the integral), @samp{e1(x)} -- exponential integral @math{E_1(x) := Re \int_1^\infty dt \exp(-xt)/t} , @samp{e2(x)} -- exponential integral @math{E_2(x) := Re \int_1^\infty dt \exp(-xt)/t^2}, @samp{ei3(x)} -- exponential integral @math{Ei_3(x) = \int_0^x dt \exp(-t^3)} for x>=0.

Bessel functions are: @samp{j(nu,x)} -- regular cylindrical Bessel function of fractional order @var{nu}, @samp{y(nu,x)} -- irregular cylindrical Bessel function of fractional order @var{nu}, @samp{i(nu,x)} -- regular modified Bessel function of fractional order @var{nu}, @samp{k(nu,x)} -- irregular modified Bessel function of fractional order @var{nu}.

Elliptic integrals are: @samp{ee(k)} -- complete elliptic integral is denoted by @math{E(k) = E(\pi/2, k)}, @samp{ek(k)} -- complete elliptic integral is denoted by @math{K(k) = F(\pi/2, k)}, @samp{e(phi,k)} -- elliptic integral @math{E(\phi,k) = \int_0^\phi dt \sqrt((1 - k^2 \sin^2(t)))}, @samp{f(phi,k)} -- elliptic integral @math{F(\phi,k) = \int_0^\phi dt 1/\sqrt((1 - k^2 \sin^2(t)))}.

Jacobi elliptic functions are: @samp{sn(u,m)}, @samp{cn(u,m)}, @samp{dn(u,m)}, @samp{sc(u,m)}, @samp{sd(u,m)}, @samp{ns(u,m)}, @samp{cs(u,m)}, @samp{cd(u,m)}, @samp{nc(u,m)}, @samp{ds(u,m)}, @samp{dc(u,m)}, @samp{nd(u,m)}.

Note, some of these functions are unavailable if NO\_GSL is defined during compilation of MathGL library. 

@deftypemethod mglFormula @code{} mglFormula (@code{const char *}str)
Parses the formula @var{str} and creates formula-tree. Constructor recursively parses the formula and creates a tree-like structure containing functions and operators for fast further evaluating by @code{Calc()} or @code{CalcD()} functions.
@end deftypemethod
@deftypemethod mglFormula @code{float} Calc (@code{float} x, @code{float} y=@code{0}, @code{float} z=@code{0}, @code{float} u=@code{0})
Evaluates the formula for @code{'x','r'}=@var{x}, @code{'y','n'}=@var{y}, @code{'z','t'}=@var{z}, @code{'a','u'}=@var{u}. Error code (if one) can be obtained from function @code{GetError()}.
@end deftypemethod
@deftypemethod mglFormula @code{float} Calc (@code{float} x, @code{float} y, @code{float} z, @code{float} u, @code{float} v, @code{float} w)
Evaluates the formula for @code{'x'}=@var{x}, @code{'y'}=@var{y}, @code{'z'}=@var{z}, @code{'u'}=@var{u}, @code{'v'}=@var{v}, @code{'w'}=@var{w}. Error code (if one) can be obtained from function @code{GetError()}.
@end deftypemethod
@deftypemethod mglFormula @code{float} Calc (@code{float} var@code{['z'-'a'+1]})
Evaluates the formula for variables in array @var{var}['z'-'a']. Error code (if one) can be obtained from function @code{GetError()}.
@end deftypemethod
@deftypemethod mglFormula @code{float} CalcD (@code{float} var@code{['z'-'a'+1]}, @code{char} diff)
Evaluates the formula derivation respect to @var{diff} for variables in array @var{var}['z'-'a']. Error code (if one) can be obtained from function @code{GetError()}.
@end deftypemethod
@deftypemethod mglFormula @code{int} GetError ()
Returns error code: @code{0} means no error; @code{ERR_LOG} means error in logarithm or power functions; @code{ERR_ARC} means error in inverse functions (like asin); @code{ERR_SQRT} means error in sqrt function.
@end deftypemethod

@c ------------------------------------------------------------------
@node mglFont class, mglColor class, mglFormula class, Other classes
@section mglFont class
@cindex mglFont

Class for working with font: load, get metrics, parse and draw strings. This class is defined in @code{#include <mgl/mgl_font.h>}.

The class is based on loading and drawing of vector Hershey font. There are two styles of specifying of the font type and aligning: by integer parameters or by string.

The string can be any combination of characters: @samp{rbiLCRwou}. The font types are: @samp{r} -- roman font, @samp{i} -- italic style, @samp{b} -- bold style. By default roman font (that is @samp{} or @samp{r}) is used. The align types are: @samp{L} -- align left (default), @samp{C} -- align center, @samp{R} -- align right. Additional font effects are: @samp{w} -- wire, @samp{o} -- over-lined, @samp{u} -- underlined.

The over way of font and alignment setting is the using of the integer constant. Integer font Id can be one of predefined constants: @code{MGL_FONT_ITAL, MGL_FONT_BOLD, MGL_FONT_BOLD_ITAL = MGL_FONT_ITAL+MGL_FONT_BOLD}. Default font is @code{MGL_FONT_ROMAN}. Also there are flags @code{MGL_FONT_ULINE, MGL_FONT_OLINE, MGL_FONT_WIRE} for additional font effects. Align parameter controls the text alignment: 0 -- align left, 1 -- align center, 2 -- align right.

Parsing of the string to special (TeX-like) commands will be done if variable @var{parse} is true (it's default). There are commands for the font style changing inside the string (for example, use \b for bold font): \a or \overline -- over-lined, \b or \textbf -- bold, \i or \textit -- italic, \r or \textrm -- roman (disable bold and italic attributes), \u or \underline -- underlined, \w or \wire -- wired, \big -- bigger size, @@ -- smaller size. The lower and upper indexes are specified by @samp{_} and @samp{^} symbols. At this the changed font style is applied only on next symbol or symbols in braces @{@}. The text in braces @{@} are treated as single symbol that allow one to print the index of index. For example, compare the strings @samp{sin (x^@{2^3@})} and @samp{sin (x^2^3)}. You may also change text color inside string by command #? or by \color? where @samp{?} is symbolic id of the color (@pxref{mglColor class}). For example, words @samp{Blue} and @samp{red} will be colored in the string @samp{#b@{Blue@} and \colorr@{red@} text}.

The most of commands for special TeX or AMSTeX symbols, the commands for font style changing (\textrm, \textbf, \textit, \overline, \underline), accents (\hat, \tilde, \dot, \ddot, \acute, \check, \grave, \bar, \breve) and roots (\sqrt, \sqrt3, \sqrt4) are recognized. The full list contain approximately 2000 commands. Note that first space symbol after the command is ignored, but second one is printed as normal symbol (space). For example, the following strings produce the same result @math{\tilde a}: @samp{\tilde@{a@}}; @samp{\tilde a}; @samp{\tilde@{@}a}.

@ifhtml
@html
The Greek letters are recognizable special symbols: &alpha; &ndash; \alpha, &beta; &ndash; \beta, &gamma; &ndash; \gamma, &delta; &ndash; \delta, &epsilon; &ndash; \epsilon, &eta; &ndash; \eta, &iota; &ndash; \iota, &chi; &ndash; \chi, &kappa; &ndash; \kappa, &lambda; &ndash; \lambda, &mu; &ndash; \mu, &nu; &ndash; \nu, o &ndash; \o, &omega; &ndash; \omega, &#981; &ndash; \phi, &pi; &ndash; \pi, &psi; &ndash; \psi, &rho; &ndash; \rho, &sigma; &ndash; \sigma, &theta; &ndash; \theta, &tau; &ndash; \tau, &upsilon; &ndash; \upsilon, &xi; &ndash; \xi, &zeta; &ndash; \zeta, &sigmaf; &ndash; \varsigma, &#603; &ndash; \varepsilon, &thetasym; &ndash; \vartheta, &phi; &ndash; \varphi, &#1008; &ndash; \varkappa; A &ndash; \Alpha, B &ndash; \Beta, &Gamma; &ndash; \Gamma, &Delta; &ndash; \Delta, E &ndash; \Epsilon, H &ndash; \Eta, I &ndash; \Iota, C &ndash; \Chi, K &ndash; \Kappa, &Lambda; &ndash; \Lambda, M &ndash; \Mu, N &ndash; \Nu, O &ndash; \O, &Omega; &ndash; \Omega, &Phi; &ndash; \Phi, &Pi; &ndash; \Pi, &Psi; &ndash; \Psi, R &ndash; \Rho, &Sigma; &ndash; \Sigma, &Theta; &ndash; \Theta, T &ndash; \Tau, &Upsilon; &ndash; \Upsilon, &Xi; &ndash; \Xi, Z &ndash; \Zeta.

<p>The small part of most common special TeX symbols are: &ang; &ndash; \angle, &sdot; &ndash; \cdot, &clubs; &ndash; \clubsuit, &#10003; &ndash; \checkmark, &cup; &ndash; \cup, &cap; &ndash; \cap, &#9826; &ndash; \diamondsuit, &#9671; &ndash; \diamond, &divide;
 &ndash; \div, 
&darr; &ndash; \downarrow, &dagger; &ndash; \dag, &Dagger; &ndash; \ddag, &equiv; &ndash; \equiv, &exist; &ndash; \exists, &#8994; &ndash; \frown, &#9837; &ndash; \flat, &ge; &ndash; \ge, &ge; &ndash; \geq, &#8807; &ndash; \geqq, &larr; &ndash; \gets, &#9825; &ndash; \heartsuit, &infin; &ndash; \infty, &int; &ndash; \int, \Int, &image;  &ndash; \Im, &#9826; &ndash; \lozenge, &#10216; &ndash; \langle, &le; &ndash; \le, &le; &ndash; \leq, &#8806; &ndash; \leqq, &larr; &ndash; \leftarrow, &#8723; &ndash; \mp, &nabla; &ndash; \nabla, &ne; &ndash; \ne, &ne; &ndash; \neq, &#9838; &ndash; \natural, &#8750; &ndash; \oint, &#8857; &ndash; \odot, &oplus; &ndash; \oplus, &part; &ndash; \partial, &#8741; &ndash; \parallel, &perp; &ndash;\perp, &plusmn; &ndash; \pm, &prop; &ndash; \propto, &prod; &ndash; \prod, &real; &ndash; \Re, &rarr; &ndash; \rightarrow, &#10217; &ndash; \rangle, &spades; &ndash; \spadesuit, ~ &ndash; \sim, &#8995; &ndash; \smile, &sub;  &ndash; \subset, &sup; &ndash; \supset, &radic; &ndash; \sqrt or \surd, &sect; &ndash; \S, &#9839; &ndash; \sharp, &sum; &ndash; \sum, &times; &ndash; \times, &rarr; &ndash; \to, &there4; &ndash; \therefore, &uarr; &ndash; \uparrow, &weierp; &ndash; \wp. </p>
@end html
@end ifhtml
@ifnothtml
The Greek letters are recognizable special symbols: @math{\alpha} -- \alpha, @math{\beta} -- \beta, @math{\gamma} -- \gamma, @math{\delta} -- \delta, @math{\epsilon} -- \epsilon, @math{\eta} -- \eta, @math{\iota} -- \iota, @math{\chi} -- \chi, @math{\kappa} -- \kappa, @math{\lambda} -- \lambda, @math{\mu} -- \mu, @math{\nu} -- \nu, @math{o} -- \o, @math{\omega} -- \omega, @math{\phi} -- \phi, @math{\pi} -- \pi, @math{\psi} -- \psi, @math{\rho} -- \rho, @math{\sigma} -- \sigma, @math{\theta} -- \theta, @math{\tau} -- \tau, @math{\upsilon} -- \upsilon, @math{\xi} -- \xi, @math{\zeta} -- \zeta, @math{\varsigma} -- \varsigma, @math{\varepsilon} -- \varepsilon, @math{\vartheta} -- \vartheta, @math{\varphi} -- \varphi, A -- \Alpha, B -- \Beta, @math{\Gamma} -- \Gamma, @math{\Delta} -- \Delta, E -- \Epsilon, H -- \Eta, I -- \Iota, C -- \Chi, K -- \Kappa, @math{\Lambda} -- \Lambda, M -- \Mu, N -- \Nu, O -- \O, @math{\Omega} -- \Omega, @math{\Phi} -- \Phi, @math{\Pi} -- \Pi, @math{\Psi} -- \Psi, R -- \Rho, @math{\Sigma} -- \Sigma, @math{\Theta} -- \Theta, T -- \Tau, @math{\Upsilon} -- \Upsilon, @math{\Xi} -- \Xi, Z -- \Zeta.

The small part of most common special TeX symbols are: @math{\angle} -- \angle, @math{\aleph} -- \aleph, @math{\cdot} -- \cdot, @math{\clubsuit} -- \clubsuit, @math{\cup} -- \cup, @math{\cap} -- \cap, @math{\diamondsuit} -- \diamondsuit, @math{\diamond} -- \diamond, @math{\div} -- \div, @math{\downarrow} -- \downarrow, @math{\dag} -- \dag, @math{\ddag} -- \ddag, @math{\equiv} -- \equiv, @math{\exists} -- \exists, @math{\frown} -- \frown, @math{\flat} -- \flat, @math{\ge} -- \ge, @math{\geq} -- \geq, @math{\gets} -- \gets, @math{\heartsuit} -- \heartsuit, @math{\infty} -- \infty, @math{\in} -- \in, @math{\int} -- \int, @math{\Im} -- \Im, @math{\langle} -- \langle, @math{\le} -- \le, @math{\leq} -- \leq, @math{\leftarrow} -- \leftarrow, @math{\mp} -- \mp, @math{\nabla} -- \nabla, @math{\ne} -- \ne, @math{\neq} -- \neq, @math{\natural} -- \natural, @math{\oint} -- \oint, @math{\odot} -- \odot, @math{\oplus} -- \oplus, @math{\partial} -- \partial, @math{\parallel} -- \parallel, @math{\perp} -- \perp, @math{\pm} -- \pm, @math{\propto} -- \propto, @math{\prod} -- \prod, @math{\Re} -- \Re, @math{\rightarrow} -- \rightarrow, @math{\rangle} -- \rangle, @math{\spadesuit} -- \spadesuit, @math{\sim} -- \sim, @math{\smile} -- \smile, @math{\subset} -- \subset, @math{\supset} -- \supset, @math{\surd} -- \sqrt or \surd, @math{\S} -- \S, @math{\sharp} -- \sharp, @math{\sum} -- \sum, @math{\times} -- \times, @math{\to} -- \to, @math{\uparrow} -- \uparrow, @math{\wp} -- \wp and so on. 
@end ifnothtml

@menu
* Format of font files::        
@end menu


@deftypemethod mglFont @code{} mglFont (@code{const char *}name=@code{MGL_DEF_FONT_NAME}, @code{const char *}path=@code{NULL})
Initialize the font and load data from file @var{name} (default name is "STIX" for Linux and MacOS) or if  @var{name}=@code{NULL} limited data from memory (default for Windows).
@end deftypemethod
@deftypemethod mglFont @code{bool} Load (@code{const char *} base, @code{const char *}path=@code{NULL})
Load font from file @var{path}/@var{base} into the memory. The font may contain 4 files: @var{base}.vfm, @var{base}_b.vfm, @var{base}_i.vfm, @var{base}_bi.vfm. Appendix contain detailed description of font format.
@end deftypemethod
@deftypemethod mglFont @code{void} Restore ()
Restore default font.
@end deftypemethod
@deftypemethod mglFont @code{void}  (@code{mglFont *} fnt)
Copy data from other font instance.
@end deftypemethod
@deftypemethod mglFont @code{void} Clear ()
Clear memory by deleting the loaded font.
@end deftypemethod
@deftypemethod mglFont @code{inline unsigned} GetNumGlyph ()
Return the number of glyphs in the font.
@end deftypemethod
@deftypemethod mglFont @code{inline bool} Ready ()
Return true if font is loaded and ready for use.
@end deftypemethod


@deftypemethod mglFont @code{float} Height (@code{int} font)
Gets height of text for font specified by integer constant.
@end deftypemethod
@deftypemethod mglFont @code{float} Puts (@code{const char *}str, @code{int} font=@code{0}, @code{int} align=@code{0})
Prints 8-bit text string for font specified by integer constant.
@end deftypemethod
@deftypemethod mglFont @code{float} Width (@code{const char *}str, @code{int} font=@code{0})
Gets width of 8-bit text string for font specified by integer constant.
@end deftypemethod
@deftypemethod mglFont @code{float} Puts (@code{const wchar_t *}str, @code{int} font=@code{0}, @code{int} align=@code{0})
Prints Unicode text string for font specified by integer constant.
@end deftypemethod
@deftypemethod mglFont @code{float} Width (@code{const wchar_t *}str, @code{int} font=@code{0})
Gets width of Unicode text string for font specified by integer constant.
@end deftypemethod


@deftypemethod mglFont @code{float} Height (@code{const char *}how)
Gets height of text for font specified by string.
@end deftypemethod
@deftypemethod mglFont @code{float} Puts (@code{const char *}str, @code{const char *}how)
Prints 8-bit text string for font specified by string.
@end deftypemethod
@deftypemethod mglFont @code{float} Width (@code{const char *}str, @code{const char *}how)
Gets width of 8-bit text string for font specified by string.
@end deftypemethod
@deftypemethod mglFont @code{float} Puts (@code{const wchar_t *}str, @code{const char *}how)
Prints Unicode text string for font specified by string.
@end deftypemethod
@deftypemethod mglFont @code{float} Width (@code{const wchar_t *}str, @code{const char *}how)
Gets width of Unicode text string for font specified by string.
@end deftypemethod

@deftypecv {Parameter} mglFont @code{mglGraph *} gr
Instance of mglGraph class which is used for character drawing.
@end deftypecv
@deftypecv {Parameter} mglFont @code{bool} parse
Flag for switching on/off the parsing of TeX commands. Default value is @code{true}.
@end deftypecv

@c ------------------------------------------------------------------
@node Format of font files, , , mglFont class
@subsection Format of font files

Starting from v.1.6 the MathGL library uses new font files. The font is defined in 4 files with suffixes @samp{*.vfm}, @samp{*_b.vfm}, @samp{*_i.vfm}, @samp{*_bi.vfm}. These files are text files containing the data for roman font, bold font, italic font and bold italic font. The files (or some symbols in the files) for bold, italic or bold italic fonts can be absent. In this case the roman glyph will be used for them. By analogy, if the bold italic font is absent but the bold font is present then bold glyph will be used for bold italic. You may create these font files by yourself from *.ttf, *.otf files with the help of program @code{font_tools}. This program can be found at MathGL home site.

The format of font files (*.vfm -- vector font for MathGL) is the following.
@enumerate
@item
First string contains human readable comment and is always ignored.
@item
Second string contains 3 numbers, delimited by space or tabulation. The order of numbers is the following: @var{numg} -- the number of glyphs in the file (integer), @var{fact} -- the factor for glyph sizing (float), @var{size} -- the size of buffer for glyph description (integer).
@item
After it @var{numg}-th strings with glyphs description are placed. Each string contains 6 positive numbers, delimited by space of tabulation. The order of numbers is the following: Unicode glyph ID, glyph width, number of lines in glyph, position of lines coordinates in the buffer (length is 2*number of lines), number of triangles in glyph, position of triangles coordinates in the buffer (length is 6*number of triangles).
@item
The end of file contains the buffer with point coordinates at lines or triangles vertexes. The size of buffer (the number of integer) is @var{size}.
@end enumerate

Note: the closing contour line  is done automatically (so the last segment may be absent). For starting new contour use a point with coordinates @code{@{0x3fff, 0x3fff@}}.


@c ------------------------------------------------------------------
@node mglColor class, mglPoint class, mglFont class, Other classes
@section mglColor class
@cindex mglColor

Structure for working with colors. This structure is defined in @code{#include <mgl/mgl.h>}.

There are two ways to set the color in MathGL. First one is using of float values of red, green and blue channels for precise color definition. The second way is the using of character id. There are a set of characters specifying frequently used colors. Normally capital letter gives more dark color than lowercase one. The full list of characters is: @samp{k} -- black, @samp{r} -- red, @samp{R} -- dark red, @samp{g} -- green, @samp{G} -- dark green, @samp{b} -- blue, @samp{B} -- dark blue, @samp{c} -- cyan, @samp{C} -- dark cyan, @samp{m} -- magenta, @samp{M} -- dark magenta, @samp{y} -- yellow, @samp{Y} -- dark yellow (gold), @samp{h} -- gray, @samp{H} -- dark gray, @samp{w} -- white, @samp{W} -- bright gray, @samp{l} -- green-blue, @samp{L} -- dark green-blue, @samp{e} -- green-yellow, @samp{E} -- dark green-yellow, @samp{n} -- sky-blue, @samp{N} -- dark sky-blue, @samp{u} -- blue-violet, @samp{U} -- dark blue-violet, @samp{p} -- purple, @samp{P} -- dark purple, @samp{q} -- orange, @samp{Q} -- dark orange (brown).

Also you may use ``lighted'' colors in color scheme specification (@emph{not in line style!}). The ``lighted'' color contain 2 symbols: first one is usual symbol for color specification, second one is digit for its brightness. The digit can be in range @samp{1}...@samp{9}. At this @samp{5} correspond to normal color, @samp{1} is very dark version of the color (practically black), @samp{9} is very bright version of the color (practically white).

@float
@image{png/colors, 7cm}
@caption{Colors and its ids.}
@end float

@deftypecv {Parameter} mglVar @code{float} {r, g, b}
Reg, green and blue component of color.
@end deftypecv

@deftypemethod mglColor @code{} mglColor (@code{float} R, @code{float} G, @code{float} B)
Constructor sets the color by float values of Red, Green and Blue channels.
@end deftypemethod
@deftypemethod mglColor @code{} mglColor (@code{char} c=@code{'k'})
Constructor sets the color from character id. The black color is used by default.
@end deftypemethod
@deftypemethod mglColor @code{void} Set (@code{float} R, @code{float} G, @code{float} B)
Sets color from values of Red, Green and Blue channels. This values should be in interval [0,1].
@end deftypemethod
@deftypemethod mglColor @code{void} Set (@code{mglColor} c, @code{float} bright=@code{1})
Sets color as ``lighted'' version of color @var{c}.
@end deftypemethod
@deftypemethod mglColor @code{void} Set (@code{char} p)
Sets color from symbolic id.
@end deftypemethod
@deftypemethod mglColor @code{bool} Valid ()
Checks correctness of the color.
@end deftypemethod
@deftypemethod mglColor @code{float} Norm ()
Gets maximal of spectral component.
@end deftypemethod
@deftypemethod mglColor @code{bool} operator== (@code{const mglColor &}c)
Compare with another color
@end deftypemethod

@deftypefn {Library Function} {inline mglColor} operator+ (@code{const mglColor &}a, @code{const mglColor &}b)
Adds colors by its RGB values.
@end deftypefn
@deftypefn {Library Function} {inline mglColor} operator- (@code{const mglColor &}a, @code{const mglColor &}b)
Subtracts colors by its RGB values.
@end deftypefn
@deftypefn {Library Function} {inline mglColor} operator* (@code{const mglColor &}a, @code{float} b)
Multiplies color by number.
@end deftypefn
@deftypefn {Library Function} {inline mglColor} operator* (@code{float} a, @code{const mglColor &}b)
Multiplies color by number.
@end deftypefn
@deftypefn {Library Function} {inline mglColor} operator/ (@code{const mglColor &}a, @code{float} b)
Divide color by number.
@end deftypefn
@deftypefn {Library Function} {inline mglColor} operator! (@code{const mglColor &}a)
Return inverted color.
@end deftypefn

@c ------------------------------------------------------------------
@node mglPoint class, mglArg class, mglColor class, Other classes
@section mglPoint class
@cindex mglPoint

Structure describes point in space. This structure is defined in @code{#include <mgl/mgl.h>}

@deftypecv {Parameter} mglVar @code{float} {x, y, z}
Point coordinates. By default all values are zero.
@end deftypecv

@deftypefn {Library Function} {inline mglPoint} operator+ (@code{const mglPoint &}a, @code{const mglPoint &}b)
Point of summation (summation of vectors).
@end deftypefn
@deftypefn {Library Function} {inline mglPoint} operator- (@code{const mglPoint &}a, @code{const mglPoint &}b)
Point of difference (difference of vectors).
@end deftypefn
@deftypefn {Library Function} {inline mglPoint} operator* (@code{float} a, @code{const mglPoint &}b)
Multiplies (scale) points by number.
@end deftypefn
@deftypefn {Library Function} {inline mglPoint} operator* (@code{const mglPoint &}a, @code{float} b)
Multiplies (scale) points by number.
@end deftypefn
@deftypefn {Library Function} {inline mglPoint} operator/ (@code{const mglPoint &}a, @code{float} b)
Multiplies (scale) points by number 1/b.
@end deftypefn
@deftypefn {Library Function} {inline float} operator- (@code{const mglPoint &}a, @code{const mglPoint &}b)
Scalar product of vectors.
@end deftypefn
@deftypefn {Library Function} {inline mglPoint} operator^ (@code{const mglPoint &}a, @code{const mglPoint &}b)
Cross-product of vectors.
@end deftypefn
@deftypefn {Library Function} {inline mglPoint} operator& (@code{const mglPoint &}a, @code{const mglPoint &}b)
The part of @var{a} which is perpendicular to vector @var{b}.
@end deftypefn
@deftypefn {Library Function} {inline mglPoint} operator| (@code{const mglPoint &}a, @code{const mglPoint &}b)
The part of @var{a} which is parallel to vector @var{b}.
@end deftypefn

@deftypefn {Library Function} {inline mglPoint} operator! (@code{const mglPoint &}a)
Return vector perpendicular to vector @var{a}.
@end deftypefn
@deftypefn {Library Function} {inline bool} Norm (@code{const mglPoint &}a)
Return the norm |@var{a}|^2 of vector @var{a}.
@end deftypefn

@deftypefn {Library Function} {inline bool} operator== (@code{const mglPoint &}a, @code{const mglPoint &}b)
Return true if points are the same.
@end deftypefn
@deftypefn {Library Function} {inline bool} operator!= (@code{const mglPoint &}a, @code{const mglPoint &}b)
Return true if points are different.
@end deftypefn

@c ------------------------------------------------------------------
@node mglVar class, mglCommand class, mglArg class, Other classes
@section mglVar class
@cindex mglVar

Structure describes variable of type @code{mglData} and its name in MGL script. This structure is used by @code{mglParse} and is defined in @code{#include <mgl/mgl_parse.h>}.

@deftypecv {Parameter} mglVar @code{mglData} d
Data itself
@end deftypecv
@deftypecv {Parameter} mglVar @code{wchar_t} s[256]
Data name
@end deftypecv
@deftypecv {Parameter} mglVar @code{void *} o
Pointer to external object for function @var{func}.
@end deftypecv
@deftypecv {Parameter} mglVar @code{mglVar *} next
Pointer to next instance in list
@end deftypecv
@deftypecv {Parameter} mglVar @code{mglVar *} prev
Pointer to prev instance in list
@end deftypecv
@deftypecv {Parameter} mglVar @code{bool} temp
Flag for temporar variable. Temporal variables will be destroyed after script execution.
@end deftypecv
@deftypecv {Parameter} mglVar @code{void (*} func @code{)(void *)}
Callback function for destroying non-temporal variable.
@end deftypecv

@deftypemethod mglGraphAB @code{void} MoveAfter (@code{mglVar *}var)
Move variable after @var{var} and copy @code{func} from @code{var} (if @code{func} is not 0)
@end deftypemethod


@c ------------------------------------------------------------------
@node mglCommand class, , mglVar class, Other classes
@section mglCommand class
@cindex mglCommand

Structure describes MGL command, its name, short description, executable and export functions. The structure is used by @code{mglParse} and is defined in @code{#include <mgl/mgl_parse.h>}.

@deftypecv {Parameter} mglCommand @code{const wchar_t *} name
Name of command.
@end deftypecv
@deftypecv {Parameter} mglCommand @code{const wchar_t *} desc
Short command description (can be NULL).
@end deftypecv
@deftypecv {Parameter} mglCommand @code{const wchar_t *} form
Format of command arguments (can be NULL).
@end deftypecv
@deftypecv {Parameter} mglCommand @code{int (*} exec @code{)(mglGraph *gr, long n, mglArg *a, int k[10])const wchar_t *}
Function for executing (plotting) the command using grapher @var{gr} and having @var{n}-th arguments @var{a}. Function must return 0 if all is OK; or 1 if arguments are wrong.
@end deftypecv
@deftypecv {Parameter} mglCommand @code{void (*} save @code{)(wchar_t out[1024], long n, mglArg *a, int k[10])const wchar_t *}
Function for exporting in C++ (can be NULL).
@end deftypecv


@c ------------------------------------------------------------------
@node mglArg class, mglVar class, mglPoint class, Other classes
@section mglArg class
@cindex mglArg

Structure describes arguments of functions in the stucture @code{mglCommand}. It is defined in @code{#include <mgl/mgl_parse.h>}.

@deftypecv {Parameter} mglArg @code{int} type
Type of argument: 0-data, 1-string, 2-number.
@end deftypecv
@deftypecv {Parameter} mglArg @code{mglData *} d
Pointer to data (used if type=0).
@end deftypecv
@deftypecv {Parameter} mglArg @code{wchar_t} w[2048]
String with parameters (used if type=1 or if type=0 as variable name).
@end deftypecv
@deftypecv {Parameter} mglArg @code{char} s[2048]
String with parameters (used if type=1).
@end deftypecv
@deftypecv {Parameter} mglArg @code{float} v
Numerical value (used if type==2)
@end deftypecv

